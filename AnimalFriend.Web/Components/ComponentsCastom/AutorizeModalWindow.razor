@inject NavigationManager navManager

<EditForm EditContext="editContext" OnValidSubmit="Submit" FormName="Authorize" class="@ClassName" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <DataAnnotationsValidator />
    <div class="modal-dialog">
        <div class="modal-content">
            
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Authorize window</h5>
                <button @onclick="CloseModalSingIn" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="mb-3">
                        <label for="recipient-email" class="col-form-label">Email:</label>
                        <InputText @bind-Value="Authorize.Email" class="form-control" id="recipient-emil" />
                        <ValidationMessage For="@(() => Authorize.Email)" />
                    </div>
                    <div class="mb-3">
                        <label for="recipient-password" class="col-form-label">Password:</label>
                        <InputText @bind-Value="Authorize.Password" class="form-control" id="recipient-password" />
                        <ValidationMessage For="@(() => Authorize.Password)" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button @onclick=CloseModalSingIn type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-primary">Send</button>
            </div>
            @if (_isError)
            {
                <div style="color: red; padding: 5px 15px">Authorizatiion error</div>
            }
        </div>
    </div>
</EditForm>

@code{
    private bool _isError { get; set; } = false;

    [Parameter]
    public string ClassName { get; set; } = "modal fade";

    [Parameter]
    public EventCallback<string> ClassNameChanged { get; set; }

    [SupplyParameterFromForm]
    private AuthorizationInputModel Authorize { get; set; }

    public EditContext editContext;

    public AutorizeModalWindow()
    {
        Authorize = new();
        editContext = new(Authorize);
    }

    private async Task CloseModalSingIn()
    {
        ClassName = "modal fade";
        await ClassNameChanged.InvokeAsync(ClassName);
    }

    private async void Submit()
    {
        if (editContext != null && editContext.Validate())
        {
            UserService service = new();
            var info = service.GetInfoForAuthorise(Authorize.Email);

            if (info != null && info.Password == Authorize.Password.ToLower())
            {
                Login.Id = info.Id;
                Login.Role = info.RoleId;
                ClassName = "modal fade";
                CastomHeader.IsRender = true;
                await ClassNameChanged.InvokeAsync(ClassName);
                navManager.NavigateTo("/login");
                _isError = false;
            }
            else
            {
                _isError = true;
            }
        }
    }
    
}   
