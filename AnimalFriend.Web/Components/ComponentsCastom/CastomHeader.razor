@rendermode RenderMode.InteractiveServer

<header class="container-header">

    <a href="/" class="main-title">
        Animal friend
        <img class="smile-position" src="./images/smilik.png" width="50" height="50" alt="smilik">
    </a>

    <div class="header-center-button">
        @if (isRender)
        {
            <a href="/logout" @onclick=IsRender class="btn btn-primary">log out</a>
        }
        else
        {
            <button @onclick=OpenModalSingIn class="btn btn-primary">sign in</button>
            <a href="/login" class="btn btn-primary">sign up</a>
        }
    </div>

</header>

<AutorizeModalWindow @bind-ClassName="@_modalOpenClose" />

@code {
    private string _modalOpenClose { get; set; } = "modal fade";

    private void OpenModalSingIn()
    {
        _modalOpenClose = "modal-open";
    }

    [CascadingParameter]
    public Task<AuthenticationState> State { get; set; }

    //private List<Claim> claims = new List<Claim>();

    bool isRender = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var authState = await State;
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
           
            var yes = user.FindFirst(ClaimTypes.Role).Value;
            if (yes != null) isRender = true;
        }
    }
    public void IsRender()
    {
        isRender = false;
    }
}