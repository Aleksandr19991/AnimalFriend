@rendermode RenderMode.InteractiveServer

<header class="container-header">

    <a href="/" class="main-title">
        Animal friend
        <img class="smile-position" src="./images/smilik.png" width="50" height="50" alt="smilik">
    </a>

    <div class="header-center-button">
        @if (IsRender)
        {
            <a href="/logout" @onclick=IsRenderToggle class="btn btn-primary">log out</a>
        }
        else
        {
            <button @onclick=OpenModalSingIn class="btn btn-primary">sign in</button>
            <button @onclick=OpenModalSingUp class="btn btn-primary">sign up</button>
        }
    </div>

</header>

<AutorizeModalWindow @bind-ClassName="@_modalAuthOpenClose" />
<RegistrationModalWindow @bind-ClassName="@_modalRegistrOpenClose" />

@code {
    string _modalRegistrOpenClose { get; set; } = "modal fade";
    string _modalAuthOpenClose { get; set; } = "modal fade";

    private void OpenModalSingIn()
    {
        _modalAuthOpenClose = "modal-open";
        _modalRegistrOpenClose = "modal fade";
    }
    private void OpenModalSingUp()
    {
        _modalRegistrOpenClose = "modal-open";
        _modalAuthOpenClose = "modal fade";
    }

    [CascadingParameter]
    public Task<AuthenticationState> State { get; set; }

    static public bool IsRender { get; set; } = false;

    // protected override async Task OnInitializedAsync()
    // {
    //     await base.OnInitializedAsync();

    //     var authState = await State;
    //     var user = authState.User;

    //     if (user.Identity is not null && user.Identity.IsAuthenticated)
    //     {
           
    //         var yes = user.FindFirst(ClaimTypes.Role).Value;
    //         if (yes != null) IsRender = true;
    //     }
    // }
    public void IsRenderToggle()
    {
        IsRender = false;
    }
}