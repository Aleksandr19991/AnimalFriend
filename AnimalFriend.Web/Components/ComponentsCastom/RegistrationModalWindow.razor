@inject NavigationManager navManager

<EditForm EditContext="editContext" OnValidSubmit="SignUp" FormName="Registration" class="@ClassName" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Registration window</h5>
                <button @onclick="CloseModalSingIn" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="mb-3">
                        <label for="recipient-name" class="col-form-label">Name:</label>
                        <InputText @bind-Value="Registration.Name" class="form-control" id="recipient-name" />
                        <ValidationMessage For="@(() => Registration.Name)" />
                    </div>
                    <div class="mb-3">
                        <label for="recipient-email" class="col-form-label">Email:</label>
                        <InputText @bind-Value="Registration.Email" class="form-control" id="recipient-email" />
                        <ValidationMessage For="@(() => Registration.Email)" />
                    </div>
                    <div class="mb-3">
                        <label for="recipient-password" class="col-form-label">Password:</label>
                        <InputText @bind-Value="Registration.Password" class="form-control" id="recipient-password" />
                        <ValidationMessage For="@(() => Registration.Password)" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button @onclick=CloseModalSingIn type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-primary">Send</button>
            </div>
            @if (_isError)
            {
                <div style="color: red; padding: 5px 15px">@Message</div>
            }
        </div> 
    </div>
</EditForm>

@code
{
    private bool _isError { get; set; } = false;

    [SupplyParameterFromForm]
    private RegistrationInputModel Registration { get; set; } = new();

    [Parameter]
    public string ClassName { get; set; } = "modal fade";

    [Parameter]
    public EventCallback<string> ClassNameChanged { get; set; }

    private EditContext? editContext;

    private string Message { get; set; } = "";

    public RegistrationModalWindow()
    {
        editContext = new(Registration);
    }

    private async Task CloseModalSingIn()
    {
        ClassName = "modal fade";
        await ClassNameChanged.InvokeAsync(ClassName);
    }

    public async Task SignUp()
    {
        if (editContext != null && editContext.Validate())
        {
            var password = Registration.Password.ToLower();
            Registration.Password = password;

            UserRepository repository = new();
            if (!repository.GetInfoForRegistration(Registration.Email))
            {
                try
                {
                    UserService service = new();
                    Login.Id = service.AddUser(Registration);
                    Login.Role = 1;
                    ClassName = "modal fade";
                    CastomHeader.IsRender = true;
                    await ClassNameChanged.InvokeAsync(ClassName);
                    navManager.NavigateTo("/login");
                }
                catch
                {
                    Message = "Registration error";
                    _isError = true;
                }
            }
            else
            {

                Message = "email alredy exists";
                _isError = true;
            }       
        }      
    }
    
}
