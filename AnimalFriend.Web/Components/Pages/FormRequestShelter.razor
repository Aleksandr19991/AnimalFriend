@rendermode RenderMode.InteractiveServer

@if (IsSuccessfully)
{
    <EditForm EditContext="editContext" OnValidSubmit="CreateBidder" FormName="request-add-shelter" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <DataAnnotationsValidator />
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Request add a sheltor</h5>
                    <button @onclick="OnClickCallback" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="recipient-name" class="col-form-label">Name:</label>
                        <InputText @bind-Value="Bidder.Name" class="form-control" id="recipient-name" />
                        <ValidationMessage For="@(() => Bidder.Name)" />
                    </div>
                    <div class="mb-3">
                        <label for="recipient-phone" class="col-form-label">Phone:</label>
                        <InputText @bind-Value="Bidder.Phone" class="form-control" id="recipient-phone" />
                        <ValidationMessage For="@(() => Bidder.Phone)" />
                    </div>
                    <div class="mb-3">
                        <label for="recipient-email" class="col-form-label">Email:</label>
                        <InputText @bind-Value="Bidder.Email" class="form-control" id="recipient-email" />
                        <ValidationMessage For="@(() => Bidder.Email)" />
                    </div>
                    <div class="mb-3">
                        <label for="recipient-address" class="col-form-label">Address:</label>
                        <InputText @bind-Value="Bidder.Address" class="form-control" id="recipient-address" />
                        <ValidationMessage For="@(() => Bidder.Address)" />
                    </div>
                    <div class="mb-3">
                        <label for="recipient-photopath" class="col-form-label">Photo path:</label>
                        <InputText @bind-Value="Bidder.PhotoPath" class="form-control" id="recipient-photopath" />
                    </div>
                    <div class="mb-3">
                        <label for="recipient-description" class="col-form-label">Description:</label>
                        <InputTextArea @bind-Value="Bidder.Description" class="form-control" id="recipient-description" />
                        <ValidationMessage For="@(() => Bidder.Description)" />
                    </div>
                    <InputRadioGroup @bind-Value="Bidder.Type">
                        @foreach (var type in Types)
                        {
                            <div class="form-check">
                                <label class="form-check-label">
                                    <InputRadio Value="@type.TypeId" class="form-check-input" />
                                    @type.Type
                                </label>
                            </div>
                        }
                    </InputRadioGroup>
                    <ValidationMessage For="@(() => Bidder.Type)" />
                </div>
                <div class="modal-footer">
                    <button @onclick="OnClickCallback" type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Send</button>
                </div>
                @if (_isError)
                {
                    <div style="color: red; padding: 5px 15px">@_message</div>
                }
            </div>
        </div>
    </EditForm>
}
else
{
    <div class="no-avtorise">
        <h3 class="style-h3">Request added we will contact you </h3>
        <a href="/" class="btn btn-primary">back</a>
    </div>
}


@code {
    [Parameter]
    public EventCallback<MouseEventArgs> OnClickCallback { get; set; }

    public bool IsSuccessfully { get; set; }

    private bool _isError { get; set; } 

    private RequestAddShelterInputModel Bidder { get; set; }

    public EditContext editContext;

    private string _message { get; set; } = "";

    private ManagerService ManagerService { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> State { get; set; }

    protected override void OnInitialized()
    {
        Bidder = new();
        editContext = new(Bidder);
        IsSuccessfully = true;
        _isError = false;
    }

    private async void CreateBidder()
    {
        if (Bidder != null && Bidder.Type < 5 && Bidder.Type > 0)
        {
            try
            {
                var authState = await State;
                var userId = authState.User.Claims.Where(c => c.Type == "id").Select(c => c.Value).SingleOrDefault();
                ManagerService = new();
                Bidder.DateTime = DateTime.Now.ToString();
                ManagerService.AddBidder(Bidder, Convert.ToInt32(userId));
                IsSuccessfully = false;
            }
            catch
            {
                _message = "error request";
                _isError = true;
            }
        }
        else
        {
            _message = "chenge type";
            _isError = true;
        }
    }

    public class CheckBox
    {
        public int TypeId { get; set; }

        public string Type { get; set; }
    }

    public List<CheckBox> Types { get; set; } = new List<CheckBox>()
    {
        new CheckBox() {TypeId = 1, Type = "cat"},
        new CheckBox() {TypeId = 2, Type = "dog"},
        new CheckBox() {TypeId = 3, Type = "all animals"},
        new CheckBox() {TypeId = 4, Type = "other"},
    };
}
