@page "/manager-page"

@rendermode RenderMode.InteractiveServer

<PageTitle>Admin page</PageTitle>

<h3>Manager page</h3>

<div class="container-main">
    <button @onclick="OpenWindowBidder" class="btn btn-primary castom-button">application for registration</button>
    <button class="btn btn-primary castom-button">sign in</button>
    <button class="btn btn-primary castom-button">sign in</button>
</div>

<p class="info">@_info</p>

@if (_isShowBidder)
{
    <EditForm EditContext="editContext" OnValidSubmit="CreateBidder" FormName="Application" class="" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
               
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Authorize window</h5>
                    <button @onclick="CloseWindowBidder" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="recipient-name" class="col-form-label">Name:</label>
                        <InputText @bind-Value="Bidder.Name" class="form-control" id="recipient-name" />
                        <ValidationMessage For="@(() => Bidder.Name)" />
                    </div>
                    <div class="mb-3">
                        <label for="recipient-phone" class="col-form-label">Phone:</label>
                        <InputText @bind-Value="Bidder.Phone" class="form-control" id="recipient-phone" />
                        <ValidationMessage For="@(() => Bidder.Phone)" />
                    </div>
                    <div class="mb-3">
                        <label for="recipient-email" class="col-form-label">Email:</label>
                        <InputText @bind-Value="Bidder.Email" class="form-control" id="recipient-email" />
                        <ValidationMessage For="@(() => Bidder.Email)" />
                    </div>
                    <div class="mb-3">
                        <label for="recipient-address" class="col-form-label">Address:</label>
                        <InputText @bind-Value="Bidder.Address" class="form-control" id="recipient-address" />
                        <ValidationMessage For="@(() => Bidder.Address)" />
                    </div>
                    <div class="mb-3">
                        <label for="recipient-description" class="col-form-label">Description:</label>
                        <InputTextArea @bind-Value="Bidder.Description" class="form-control" id="recipient-description" />
                        <ValidationMessage For="@(() => Bidder.Description)" />
                    </div>

                    <InputRadioGroup @bind-Value="Bidder.Type">
                        @foreach (var type in Types)
                        {
                            <div class="form-check">
                                <label class="form-check-label">
                                    <InputRadio Value="@type.TypeId" class="form-check-input" />
                                    @type.Type
                                </label>
                            </div>
                        }
                    </InputRadioGroup>
                    <ValidationMessage For="@(() => Bidder.Type)" /> 
                </div>
                <div class="modal-footer">
                    <button @onclick=CloseWindowBidder type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Send</button>
                </div>
                @if (_isError)
                {
                    <div style="color: red; padding: 5px 15px">@_message</div>
                }
            </div>
        </div>
    </EditForm>
}

@code {
    private string _info { get; set; } = "";
    private bool _isError { get; set; } = false;

    private RequestCreateShelterInputModel Bidder { get; set; } = new();

    public EditContext editContext;

    private bool _isShowBidder { get; set; } = false;

    private string _message { get; set; }

    private ManagerService ManagerService { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> State { get; set; }

    public ManagerPage()
    {

    }

    protected override void OnInitialized()
    {
        editContext = new(Bidder);
    }

    private void OpenWindowBidder()
    {
        _isShowBidder = true;
    }

    private void CloseWindowBidder()
    {
        _isShowBidder = false;
        _isError = false;
    }

    private async void CreateBidder()
    {
        if ( Bidder!=null && Bidder.Type < 5 && Bidder.Type > 0) 
        {
            try
            {
                var authState = await State;
                var userId = authState.User.Claims.Where(c => c.Type == "id").Select(c => c.Value).SingleOrDefault();
                ManagerService = new();
                ManagerService.AddBidder(Bidder, Convert.ToInt32(userId));
                _info = "Bider added";
                _isShowBidder = false;

            }
            catch
            {
                _message = "error request";
                _isError = true;
            }
        }
        else
        {
            _message = "chenge type";
            _isError = true;
        }
    }

    public class CheckBox
    {
        public int TypeId { get; set; }

        public string Type { get; set; }
    }

    public List<CheckBox> Types { get; set; } = new List<CheckBox>()
    {
        new CheckBox() {TypeId = 1, Type = "dog"},
        new CheckBox() {TypeId = 2, Type = "cat"},
        new CheckBox() {TypeId = 3, Type = "all animall"},
        new CheckBox() {TypeId = 4, Type = "other"},
    };
}
            
