@page "/authorize"
@model AnimalFriend.Web.Components.Pages.AuthorizePage

<EditForm EditContext="editContext" OnSubmit="Submit" FormName="Authorize" class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <DataAnnotationsValidator />
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Authorize window</h5>
                <button @onclick="CloseModalSingIn" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="mb-3">
                        <label for="recipient-email" class="col-form-label">Email:</label>
                        <InputText @bind-Value="Authorize.Email" class="form-control" id="recipient-emil" />
                        <ValidationMessage For="@(() => Authorize.Email)" />
                    </div>
                    <div class="mb-3">
                        <label for="recipient-password" class="col-form-label">Password:</label>
                        <InputText @bind-Value="Authorize.Password" class="form-control" id="recipient-password" />
                        <ValidationMessage For="@(() => Authorize.Password)" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button @onclick=CloseModalSingIn type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-primary">Send</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    // [Parameter]
    // public string ClassName { get; set; } = "modal fade";

    // [Parameter]
    // public EventCallback<string> ClassNameChanged { get; set; }

    [SupplyParameterFromForm]
    private AuthorizationInputModel Authorize { get; set; } = new();

    [CascadingParameter]
    public HttpContext httpContext { get; set; }

    public EditContext editContext;

    protected override void OnInitialized()
    {
        editContext = new(Authorize);
    }

    private async Task CloseModalSingIn()
    // {
    //     ClassName = "modal fade";
    //     await ClassNameChanged.InvokeAsync(ClassName);
    }

    private async void Submit()
    {
        if (editContext != null && editContext.Validate())
        {
            
            var claims = new List<Claim>()
                {
                    new Claim(ClaimTypes.Role, "Client"), // need add from db
                    //new Claim("id", info.Id.ToString()),
                };
            Console.WriteLine("here2");
            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var pr = new ClaimsPrincipal(identity);
            await httpContext.SignInAsync(pr);
        }
    }

}